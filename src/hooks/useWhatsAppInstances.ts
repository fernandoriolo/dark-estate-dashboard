import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { logAudit } from '@/lib/audit/logger';
import { useUserProfile } from './useUserProfile';

export interface WhatsAppInstance {
  id: string;
  user_id: string;
  company_id: string;
  instance_name: string;
  phone_number?: string;
  profile_name?: string;
  profile_pic_url?: string;
  status: 'connected' | 'disconnected' | 'connecting' | 'qr_code' | 'error';
  webhook_url?: string;
  api_key?: string;
  last_seen?: string;
  message_count: number;
  contact_count: number;
  chat_count: number;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  // Novos campos para sistema de solicita√ß√µes
  request_status?: 'requested' | 'approved' | 'active' | 'inactive';
  requested_by?: string;
  requested_at?: string;
  request_message?: string;
  // Dados do usu√°rio (para gestores verem todas as inst√¢ncias)
  user_profile?: {
    full_name: string;
    email: string;
    role: string;
  };
  // Dados do solicitante
  requester_profile?: {
    full_name: string;
    email: string;
    role: string;
  };
}

export interface WhatsAppChat {
  id: string;
  instance_id: string;
  user_id: string;
  contact_phone: string;
  contact_name?: string;
  contact_avatar?: string;
  last_message?: string;
  last_message_time?: string;
  unread_count: number;
  is_archived: boolean;
  tags?: string[];
  lead_id?: string;
  property_id?: string;
  created_at: string;
  updated_at: string;
}

export interface WhatsAppMessage {
  id: string;
  chat_id: string;
  instance_id: string;
  user_id: string;
  message_id?: string;
  from_me: boolean;
  contact_phone?: string;
  message_type: 'text' | 'image' | 'video' | 'audio' | 'document' | 'location' | 'contact';
  content?: string;
  media_url?: string;
  caption?: string;
  timestamp: string;
  read_at?: string;
  delivered_at?: string;
  created_at: string;
}

export function useWhatsAppInstances() {
  const { profile, isManager } = useUserProfile();
  const [instances, setInstances] = useState<WhatsAppInstance[]>([]);
  const [chats, setChats] = useState<WhatsAppChat[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Carregar inst√¢ncias baseado no role do usu√°rio + dados em tempo real
  const loadInstances = async () => {
    try {
      console.log('üöÄ Iniciando carregamento de inst√¢ncias...');
      setLoading(true);
      setError(null);

      if (!profile) return;

      // 1. Buscar inst√¢ncias do banco (controle de usu√°rio)
      let query = supabase
        .from('whatsapp_instances')
        .select(`
          *,
          user_profile:user_profiles!whatsapp_instances_user_id_fkey(full_name, email, role),
          requester_profile:user_profiles!whatsapp_instances_requested_by_fkey(full_name, email, role)
        `);

      // Se for corretor, buscar apenas suas inst√¢ncias
      if (profile.role === 'corretor') {
        query = query.eq('user_id', profile.id);
      } 
      // Se for gestor/admin, buscar todas as inst√¢ncias (sem filtro extra)
      else if (isManager) {
        // no-op
      } else {
        // Fallback para apenas pr√≥prias inst√¢ncias
        query = query.eq('user_id', profile.id);
      }

      const { data: localInstances, error } = await query
        .eq('is_active', true)
        .order('created_at', { ascending: false });

      if (error) throw error;
      
      console.log('üíæ Dados locais carregados:', localInstances?.length || 0, 'inst√¢ncias encontradas');

      // 2. Buscar dados em tempo real do endpoint externo (uma chamada para todas)
      console.log('üîç Buscando dados em tempo real de TODAS as inst√¢ncias...');
      
      let externalInstances: any[] = [];
      
      try {
        console.log('üì° Chamando endpoint: GET /webhook/whatsapp-instances');
        
        const response = await fetch('https://webhooklabz.n8nlabz.com.br/webhook/whatsapp-instances', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          mode: 'cors',
        });

        if (response.ok) {
          const responseData = await response.json();
          console.log('‚úÖ Resposta recebida do webhook:', responseData);
          
          // O endpoint retorna {success: true, data: [...]} direto
          if (responseData.success && Array.isArray(responseData.data)) {
            externalInstances = responseData.data || [];
            console.log('üìä Total de inst√¢ncias no webhook:', externalInstances.length);
          } else {
            console.warn('‚ö†Ô∏è Formato de resposta inesperado:', responseData);
          }
        } else {
          console.warn('‚ùå Erro no endpoint webhook:', response.status);
        }
      } catch (apiError) {
        console.warn('‚ùå Sistema externo indispon√≠vel:', apiError);
      }

      // 3. Combinar dados do webhook com dados locais
      let instancesWithRealTimeData;
      
      if (isManager) {
        // GESTORES/ADMINS: Mostrar TODAS as inst√¢ncias do webhook
        console.log('üëë Usu√°rio √© gestor/admin - mostrando todas as inst√¢ncias do webhook');
        
        instancesWithRealTimeData = externalInstances.map((externalData) => {
          // Encontrar dados locais correspondentes (se existir)
          const localData = (localInstances || []).find(local => local.instance_name === externalData.name);
          
          console.log(`üîó Processando inst√¢ncia ${externalData.name}:`, {
            status: externalData.connectionStatus,
            messages: externalData._count?.Message,
            contacts: externalData._count?.Contact,
            hasLocalData: !!localData
          });
          
          // Mapear status
          const statusMap: Record<string, 'connected' | 'connecting' | 'disconnected'> = {
            open: 'connected',
            connecting: 'connecting',
            close: 'disconnected',
            closed: 'disconnected'
          };
          
          return {
            // Usar dados locais como base se existir, sen√£o criar novo objeto
            id: localData?.id || externalData.id,
            user_id: localData?.user_id || null,
            company_id: localData?.company_id || null,
            instance_name: externalData.name,
            webhook_url: localData?.webhook_url || `https://webhooklabz.n8nlabz.com.br/webhook/${externalData.name}`,
            is_active: localData?.is_active ?? true,
            created_at: localData?.created_at || externalData.createdAt,
            updated_at: externalData.updatedAt,
            user_profile: localData?.user_profile || null,
            
            // Dados em tempo real do webhook
            status: statusMap[externalData.connectionStatus] || 'disconnected',
            profile_name: externalData.profileName,
            profile_pic_url: externalData.profilePicUrl,
            message_count: externalData._count?.Message || 0,
            contact_count: externalData._count?.Contact || 0,
            chat_count: externalData._count?.Chat || 0,
            last_seen: externalData.updatedAt,
            phone_number: externalData.ownerJid ? 
              formatPhoneNumber(externalData.ownerJid.replace('@s.whatsapp.net', '')) : 
              null,
            api_key: externalData.token
          };
        });
        
      } else {
        // CORRETORES: Combinar apenas suas inst√¢ncias locais com dados do webhook
        console.log('üë§ Usu√°rio √© corretor - combinando inst√¢ncias locais com webhook');
        
        instancesWithRealTimeData = (localInstances || []).map((localInstance) => {
          // Encontrar dados correspondentes no webhook pelo nome da inst√¢ncia
          const externalData = externalInstances.find(ext => ext.name === localInstance.instance_name);
          
          if (externalData) {
            console.log(`üîó Combinando dados para ${localInstance.instance_name}:`, {
              status: externalData.connectionStatus,
              messages: externalData._count?.Message,
              contacts: externalData._count?.Contact
            });
            
            // Mapear status
            const statusMap: Record<string, 'connected' | 'connecting' | 'disconnected'> = {
              open: 'connected',
              connecting: 'connecting',
              close: 'disconnected',
              closed: 'disconnected'
            };
            
            return {
              ...localInstance,
              // Atualizar com dados em tempo real do webhook
              status: statusMap[externalData.connectionStatus] || 'disconnected',
              profile_name: externalData.profileName || localInstance.profile_name,
              profile_pic_url: externalData.profilePicUrl || localInstance.profile_pic_url,
              message_count: externalData._count?.Message || localInstance.message_count,
              contact_count: externalData._count?.Contact || localInstance.contact_count,
              chat_count: externalData._count?.Chat || localInstance.chat_count,
              last_seen: externalData.updatedAt || localInstance.last_seen,
              phone_number: externalData.ownerJid ? 
                formatPhoneNumber(externalData.ownerJid.replace('@s.whatsapp.net', '')) : 
                localInstance.phone_number,
              api_key: externalData.token || localInstance.api_key
            };
          } else {
            console.log(`‚ö†Ô∏è Inst√¢ncia ${localInstance.instance_name} n√£o encontrada no webhook, usando dados locais`);
            return {
              ...localInstance,
              status: 'disconnected' as const
            };
          }
        });
      }

      // Fallback para garantir que sempre seja um array
      if (!instancesWithRealTimeData) {
        console.warn('‚ö†Ô∏è Nenhuma inst√¢ncia processada, usando array vazio');
        instancesWithRealTimeData = [];
      }

      setInstances(instancesWithRealTimeData);
      console.log('‚úÖ Carregamento conclu√≠do!', {
        role: profile.role,
        totalInstances: instancesWithRealTimeData.length,
        localInstances: localInstances?.length || 0,
        webhookInstances: externalInstances.length
      });

    } catch (error: any) {
      console.error('Erro ao carregar inst√¢ncias:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  // Fun√ß√£o auxiliar para formatar telefone
  const formatPhoneNumber = (phone: string) => {
    if (!phone) return phone;
    // Formato brasileiro: +55 (11) 99999-9999
    const cleaned = phone.replace(/\D/g, '');
    if (cleaned.length === 13 && cleaned.startsWith('55')) {
      return `+55 (${cleaned.slice(2, 4)}) ${cleaned.slice(4, 9)}-${cleaned.slice(9)}`;
    }
    return `+${cleaned}`;
  };

  // Criar nova inst√¢ncia
  const createInstance = async (instanceData: {
    instance_name: string;
    phone_number?: string;
    assigned_user_id?: string; // Para gestores atribu√≠rem a corretores
  }) => {
    try {
      if (!profile) throw new Error('Perfil n√£o encontrado');
      
      // Verificar se o usu√°rio tem permiss√£o para criar inst√¢ncias (apenas gestores/admins)
      if (profile.role === 'corretor') {
        throw new Error('Apenas gestores e administradores podem criar inst√¢ncias WhatsApp');
      }

      // Definir para qual usu√°rio a inst√¢ncia ser√° atribu√≠da
      const targetUserId = instanceData.assigned_user_id || profile.id;
      
      console.log('üîç Debug cria√ß√£o inst√¢ncia:', {
        currentUser: profile.id,
        currentUserRole: profile.role,
        targetUserId: targetUserId,
        assignedUserId: instanceData.assigned_user_id,
        instanceName: instanceData.instance_name
      });

      // Gerar UUID para sessionId
      const generateUUID = () => {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
          const r = Math.random() * 16 | 0;
          const v = c == 'x' ? r : (r & 0x3 | 0x8);
          return v.toString(16);
        });
      };

      // 1. Criar inst√¢ncia no sistema externo (WhatsApp)
      let externalData = null;
      
      try {
        const sessionId = generateUUID();
        console.log('üÜï Chamando endpoint: POST /webhook/criar-instancia para', instanceData.instance_name);
        console.log('üìã Par√¢metros enviados:', {
          instanceName: instanceData.instance_name,
          phoneNumber: instanceData.phone_number,
          sessionId: sessionId
        });
        
        const externalResponse = await fetch('https://webhooklabz.n8nlabz.com.br/webhook/criar-instancia', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          mode: 'cors',
          body: JSON.stringify({
            instanceName: instanceData.instance_name,
            phoneNumber: instanceData.phone_number,
            sessionId: sessionId
          }),
        });

        if (!externalResponse.ok) {
          const errorData = await externalResponse.text();
          console.warn('Erro no sistema externo (continuando com cria√ß√£o local):', errorData);
          // N√£o falhar aqui, apenas avisar
        } else {
          externalData = await externalResponse.json();
          console.log('üîó Inst√¢ncia criada no sistema externo:', externalData);
        }
      } catch (externalError) {
        console.warn('Sistema externo indispon√≠vel (continuando com cria√ß√£o local):', externalError);
        // Continuar mesmo se o sistema externo falhar
      }

      // 2. Salvar inst√¢ncia no banco de dados local (controle de usu√°rio)
      const { data, error } = await supabase
        .from('whatsapp_instances')
        .insert({
          user_id: targetUserId, // Atribuir para o usu√°rio selecionado ou para o gestor
          instance_name: instanceData.instance_name,
          phone_number: instanceData.phone_number,
          webhook_url: `https://webhooklabz.n8nlabz.com.br/webhook/${instanceData.instance_name}`,
          status: 'qr_code', // Inicialmente aguardando QR code
          api_key: externalData?.data?.token || null
        })
        .select(`
          *,
          user_profile:user_profiles!whatsapp_instances_user_id_fkey(full_name, email, role),
          requester_profile:user_profiles!whatsapp_instances_requested_by_fkey(full_name, email, role)
        `)
        .single();

      if (error) {
        console.error('‚ùå Erro detalhado na inser√ß√£o:', {
          error,
          errorMessage: error.message,
          errorDetails: error.details,
          errorHint: error.hint,
          targetUserId,
          instanceData
        });
        
        // Se falhar ao salvar localmente, tentar deletar a inst√¢ncia externa (se foi criada)
        if (externalData) {
          try {
            await fetch('https://webhooklabz.n8nlabz.com.br/webhook/deletar-instancia', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              mode: 'cors',
              body: JSON.stringify({
                instanceName: instanceData.instance_name
              }),
            });
          } catch (deleteError) {
            console.warn('Erro ao limpar inst√¢ncia externa ap√≥s falha local:', deleteError);
          }
        }
        throw error;
      }

      // 3. Combinar dados local + externo
      const combinedData = {
        ...data,
        // Dados do sistema externo se dispon√≠veis
        qr_code: externalData?.data?.qrcode || null,
        api_key: externalData?.data?.token || null,
        status: externalData?.success ? 'qr_code' : 'disconnected'
      };

      setInstances(prev => [combinedData, ...prev]);
      try { await logAudit({ action: 'whatsapp.instance_created', resource: 'whatsapp_instance', resourceId: (combinedData as any)?.id, meta: { instance_name: instanceData.instance_name } }); } catch {}
      return combinedData;

    } catch (error: any) {
      console.error('Erro ao criar inst√¢ncia:', error);
      throw error;
    }
  };

  // Atualizar status da inst√¢ncia
  const updateInstanceStatus = async (instanceId: string, status: WhatsAppInstance['status']) => {
    try {
      const { data, error } = await supabase
        .from('whatsapp_instances')
        .update({ 
          status,
          last_seen: new Date().toISOString()
        })
        .eq('id', instanceId)
        .select(`
          *,
          user_profile:user_profiles!whatsapp_instances_user_id_fkey(full_name, email, role),
          requester_profile:user_profiles!whatsapp_instances_requested_by_fkey(full_name, email, role)
        `)
        .single();

      if (error) throw error;

      setInstances(prev => 
        prev.map(instance => 
          instance.id === instanceId ? data : instance
        )
      );
      try { await logAudit({ action: 'whatsapp.instance_status_updated', resource: 'whatsapp_instance', resourceId: instanceId, meta: { status } }); } catch {}

      return data;

    } catch (error: any) {
      console.error('Erro ao atualizar status:', error);
      throw error;
    }
  };

  // Deletar inst√¢ncia (apenas pr√≥prias inst√¢ncias ou se for gestor)
  const deleteInstance = async (instanceId: string) => {
    try {
      // 1. Buscar dados da inst√¢ncia antes de deletar
      const instanceToDelete = instances.find(inst => inst.id === instanceId);
      if (!instanceToDelete) {
        throw new Error('Inst√¢ncia n√£o encontrada');
      }

      // 2. Deletar do sistema externo primeiro
      try {
        console.log('üóëÔ∏è Chamando endpoint: POST /webhook/deletar-instancia para', instanceToDelete.instance_name);
        
        const response = await fetch(`https://webhooklabz.n8nlabz.com.br/webhook/deletar-instancia`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          mode: 'cors',
          body: JSON.stringify({
            instanceName: instanceToDelete.instance_name
          }),
        });

        if (!response.ok) {
          const errorText = await response.text();
          console.warn('‚ùå Erro HTTP ao deletar inst√¢ncia externa:', response.status, response.statusText);
          console.warn('üìù Resposta do servidor:', errorText);
          throw new Error(`Erro no sistema externo (${response.status})`);
        }

        const responseData = await response.json();
        console.log(`üóëÔ∏è Resposta da dele√ß√£o externa:`, responseData);
        
        if (!responseData.success) {
          throw new Error(responseData.message || 'Falha ao deletar no sistema externo');
        }

        console.log(`‚úÖ Inst√¢ncia ${instanceToDelete.instance_name} deletada do sistema externo com sucesso`);
      } catch (externalError: any) {
        console.error('‚ùå Erro ao deletar do sistema externo:', externalError.message);
        throw new Error(`Falha ao deletar no sistema externo: ${externalError.message}`);
      }

      // 3. Deletar do banco de dados local apenas se a dele√ß√£o externa foi bem-sucedida
      const { error } = await supabase
        .from('whatsapp_instances')
        .delete()
        .eq('id', instanceId);

      if (error) {
        console.error('‚ùå Erro ao deletar do Supabase:', error);
        throw new Error(`Erro ao deletar do banco local: ${error.message}`);
      }

      // 4. Atualizar estado local
      setInstances(prev => prev.filter(instance => instance.id !== instanceId));
      console.log(`‚úÖ Inst√¢ncia ${instanceToDelete.instance_name} deletada completamente`);

    } catch (error: any) {
      console.error('‚ùå Erro completo ao deletar inst√¢ncia:', error);
      throw error;
    }
  };

  // Conectar inst√¢ncia via endpoint
  const connectInstance = async (instanceId: string) => {
    try {
      const instance = instances.find(inst => inst.id === instanceId);
      if (!instance) {
        throw new Error('Inst√¢ncia n√£o encontrada');
      }

      console.log('üîó Chamando endpoint: POST /webhook/conectar-instancia para', instance.instance_name);

      const response = await fetch('https://webhooklabz.n8nlabz.com.br/webhook/conectar-instancia', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        mode: 'cors',
        body: JSON.stringify({
          instanceName: instance.instance_name
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.warn('‚ùå Erro HTTP ao conectar inst√¢ncia:', response.status, response.statusText);
        console.warn('üìù Resposta do servidor:', errorText);
        throw new Error(`Erro ao conectar inst√¢ncia (${response.status})`);
      }

      const data = await response.json();
      console.log(`üîó Resposta da conex√£o:`, data);

      if (data.success) {
        // Atualizar status no Supabase
        await updateInstanceStatus(instanceId, 'connected');
        try { await logAudit({ action: 'whatsapp.instance_connected', resource: 'whatsapp_instance', resourceId: instanceId, meta: null }); } catch {}
        console.log(`‚úÖ Inst√¢ncia ${instance.instance_name} conectada com sucesso`);
        return data;
      } else {
        throw new Error(data.message || 'Falha ao conectar inst√¢ncia');
      }

    } catch (error: any) {
      console.error('‚ùå Erro ao conectar inst√¢ncia:', error);
      throw error;
    }
  };

  // Desconectar inst√¢ncia via endpoint
  const disconnectInstance = async (instanceId: string) => {
    try {
      const instance = instances.find(inst => inst.id === instanceId);
      if (!instance) {
        throw new Error('Inst√¢ncia n√£o encontrada');
      }

      console.log('üîå Chamando endpoint: POST /webhook/desconectar-instancia para', instance.instance_name);

      const response = await fetch('https://webhooklabz.n8nlabz.com.br/webhook/desconectar-instancia', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        mode: 'cors',
        body: JSON.stringify({
          instanceName: instance.instance_name
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.warn('‚ùå Erro HTTP ao desconectar inst√¢ncia:', response.status, response.statusText);
        console.warn('üìù Resposta do servidor:', errorText);
        throw new Error(`Erro ao desconectar inst√¢ncia (${response.status})`);
      }

      const data = await response.json();
      console.log(`üîå Resposta da desconex√£o:`, data);

      if (data.success) {
        // Atualizar status no Supabase
        await updateInstanceStatus(instanceId, 'disconnected');
        try { await logAudit({ action: 'whatsapp.instance_disconnected', resource: 'whatsapp_instance', resourceId: instanceId, meta: null }); } catch {}
        console.log(`‚úÖ Inst√¢ncia ${instance.instance_name} desconectada com sucesso`);
        return data;
      } else {
        throw new Error(data.message || 'Falha ao desconectar inst√¢ncia');
      }

    } catch (error: any) {
      console.error('‚ùå Erro ao desconectar inst√¢ncia:', error);
      throw error;
    }
  };

  // Gerar QR Code para conex√£o
  const generateQrCode = async (instanceId: string): Promise<string | null> => {
    try {
      const instance = instances.find(inst => inst.id === instanceId);
      if (!instance) {
        throw new Error('Inst√¢ncia n√£o encontrada');
      }

      console.log('üì± Chamando endpoint: POST /webhook/puxar-qrcode para', instance.instance_name);

      const response = await fetch(`https://webhooklabz.n8nlabz.com.br/webhook/puxar-qrcode`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        mode: 'cors',
        body: JSON.stringify({
          instanceName: instance.instance_name
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.warn('‚ùå Erro HTTP ao gerar QR code:', response.status, response.statusText);
        console.warn('üìù Resposta do servidor:', errorText);
        throw new Error(`Sistema externo indispon√≠vel (${response.status}). Verifique se a inst√¢ncia foi criada corretamente.`);
      }

      // Verificar se a resposta tem conte√∫do
      const responseText = await response.text();
      console.log('üì• Resposta bruta do QR code:', responseText);

      if (!responseText || responseText.trim() === '') {
        throw new Error('Resposta vazia do servidor. A inst√¢ncia pode n√£o ter sido criada corretamente.');
      }

      let data;
      try {
        data = JSON.parse(responseText);
      } catch (parseError) {
        console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
        console.error('üìù Conte√∫do que falhou no parse:', responseText);
        throw new Error('Resposta inv√°lida do servidor. Tente novamente em alguns segundos.');
      }

      console.log('‚úÖ Dados parseados do QR code:', data);
      
      if (data.success && data.data?.qrcode) {
        // Atualizar status da inst√¢ncia
        await updateInstanceStatus(instanceId, 'qr_code');
        try { await logAudit({ action: 'whatsapp.instance_qr_generated', resource: 'whatsapp_instance', resourceId: instanceId, meta: null }); } catch {}
        return data.data.qrcode;
      } else if (data.success && data.qrcode) {
        // Formato alternativo da resposta
        await updateInstanceStatus(instanceId, 'qr_code');
        try { await logAudit({ action: 'whatsapp.instance_qr_generated', resource: 'whatsapp_instance', resourceId: instanceId, meta: null }); } catch {}
        return data.qrcode;
      } else if (data.success && data.data?.base64) {
        // Novo formato com base64
        await updateInstanceStatus(instanceId, 'qr_code');
        try { await logAudit({ action: 'whatsapp.instance_qr_generated', resource: 'whatsapp_instance', resourceId: instanceId, meta: null }); } catch {}
        return data.data.base64;
      } else {
        console.warn('‚ö†Ô∏è QR code n√£o encontrado na resposta:', data);
        throw new Error(data.message || 'QR code n√£o dispon√≠vel. Verifique se a inst√¢ncia foi criada corretamente.');
      }

    } catch (error: any) {
      console.error('‚ùå Erro completo ao gerar QR code:', error);
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        throw new Error('Erro de conex√£o com o servidor. Verifique sua internet e tente novamente.');
      }
      throw error;
    }
  };

  // Carregar chats de uma inst√¢ncia espec√≠fica
  const loadChats = async (instanceId: string) => {
    try {
      const { data, error } = await supabase
        .from('whatsapp_chats')
        .select('*')
        .eq('instance_id', instanceId)
        .eq('is_archived', false)
        .order('last_message_time', { ascending: false, nullsFirst: false });

      if (error) throw error;

      setChats(data || []);
      return data || [];

    } catch (error: any) {
      console.error('Erro ao carregar chats:', error);
      throw error;
    }
  };

  // Criar novo chat
  const createChat = async (chatData: {
    instance_id: string;
    contact_phone: string;
    contact_name?: string;
    lead_id?: string;
    property_id?: string;
  }) => {
    try {
      if (!profile) throw new Error('Perfil n√£o encontrado');

      const { data, error } = await supabase
        .from('whatsapp_chats')
        .insert({
          ...chatData,
          user_id: profile.id,
        })
        .select()
        .single();

      if (error) throw error;

      setChats(prev => [data, ...prev]);
      // Audit
      logAudit({ action: 'whatsapp.chat_created', resource: 'whatsapp_chat', resourceId: data.id, meta: { contact_phone: chatData.contact_phone, instance_id: chatData.instance_id } });
      return data;

    } catch (error: any) {
      console.error('Erro ao criar chat:', error);
      throw error;
    }
  };

  // Carregar mensagens de um chat
  const loadMessages = async (chatId: string): Promise<WhatsAppMessage[]> => {
    try {
      const { data, error } = await supabase
        .from('whatsapp_messages')
        .select('*')
        .eq('chat_id', chatId)
        .order('timestamp', { ascending: true });

      if (error) throw error;

      return data || [];

    } catch (error: any) {
      console.error('Erro ao carregar mensagens:', error);
      throw error;
    }
  };

  // Enviar mensagem
  const sendMessage = async (messageData: {
    chat_id: string;
    instance_id: string;
    contact_phone: string;
    message_type: WhatsAppMessage['message_type'];
    content: string;
    media_url?: string;
    caption?: string;
  }) => {
    try {
      if (!profile) throw new Error('Perfil n√£o encontrado');

      const { data, error } = await supabase
        .from('whatsapp_messages')
        .insert({
          ...messageData,
          user_id: profile.id,
          from_me: true,
        })
        .select()
        .single();

      if (error) throw error;

      // Aqui voc√™ integraria com a API do WhatsApp para enviar a mensagem real
      // Audit
      logAudit({ action: 'whatsapp.message_sent', resource: 'whatsapp_message', resourceId: data.id, meta: { chat_id: messageData.chat_id, instance_id: messageData.instance_id, contact_phone: messageData.contact_phone } });

      return data;

    } catch (error: any) {
      console.error('Erro ao enviar mensagem:', error);
      throw error;
    }
  };

  // Marcar mensagens como lidas
  const markAsRead = async (chatId: string) => {
    try {
      const { error } = await supabase
        .from('whatsapp_chats')
        .update({ unread_count: 0 })
        .eq('id', chatId);

      if (error) throw error;

      setChats(prev => 
        prev.map(chat => 
          chat.id === chatId ? { ...chat, unread_count: 0 } : chat
        )
      );

    } catch (error: any) {
      console.error('Erro ao marcar como lida:', error);
      throw error;
    }
  };

  // Filtrar inst√¢ncias por usu√°rio (para gestores)
  const getInstancesByUser = (userId: string) => {
    return instances.filter(instance => instance.user_id === userId);
  };

  // Buscar usu√°rios DISPON√çVEIS para atribui√ß√£o (sem inst√¢ncias vinculadas)
  // Esta fun√ß√£o √© a fonte √∫nica de verdade para o dropdown "Atribuir Para"
  const loadAvailableUsersForAssignment = async () => {
    try {
      if (!isManager) {
        console.warn('Apenas gestores podem carregar lista de usu√°rios dispon√≠veis');
        return [];
      }

      console.log('üîÑ loadAvailableUsersForAssignment: Iniciando busca de usu√°rios dispon√≠veis');

      // Passo 1: Buscar usu√°rios com inst√¢ncias ativas
      const { data: usersWithInstances, error: instancesError } = await supabase
        .from('whatsapp_instances')
        .select('user_id')
        .eq('company_id', profile?.company_id)
        .eq('is_active', true)
        .not('user_id', 'is', null);

      if (instancesError) {
        console.error('‚ùå Erro ao buscar inst√¢ncias:', instancesError);
        throw instancesError;
      }

      // Extrair IDs dos usu√°rios que j√° t√™m inst√¢ncias
      const userIdsWithInstances = (usersWithInstances || [])
        .map(instance => instance.user_id)
        .filter(Boolean);

      console.log('üîç DEBUG: Usu√°rios com inst√¢ncias:', userIdsWithInstances);

      // Passo 2: Buscar usu√°rios dispon√≠veis (sem inst√¢ncias)
      let query = supabase
        .from('user_profiles')
        .select('id, full_name, email, role')
        .eq('company_id', profile?.company_id)  // Mesma empresa
        .eq('is_active', true)                  // Usu√°rios ativos
        .in('role', ['corretor', 'gestor'])     // Excluir ADMIN
        .neq('id', profile?.id);                // Excluir usu√°rio atual

      // Se h√° usu√°rios com inst√¢ncias, exclu√≠-los
      if (userIdsWithInstances.length > 0) {
        query = query.not('id', 'in', `(${userIdsWithInstances.map(id => `"${id}"`).join(',')})`);
      }

      const { data: availableUsers, error } = await query
        .order('role', { ascending: false })
        .order('full_name', { ascending: true });

      if (error) {
        console.error('‚ùå Erro ao buscar usu√°rios dispon√≠veis:', error);
        throw error;
      }

      console.log('‚úÖ Usu√°rios dispon√≠veis encontrados:', {
        count: availableUsers?.length || 0,
        users: availableUsers?.map(u => `${u.full_name} (${u.role})`) || []
      });

      return availableUsers || [];
    } catch (error: any) {
      console.error('‚ùå Erro ao carregar usu√°rios dispon√≠veis:', error);
      return [];
    }
  };

  // Solicitar conex√£o criando inst√¢ncia pendente (novo fluxo integrado)
  const requestConnection = async (instanceData: {
    instance_name: string;
    phone_number?: string;
    message?: string;
  }) => {
    try {
      if (!profile?.id || !profile?.company_id) {
        throw new Error('Perfil do usu√°rio n√£o encontrado');
      }

      console.log('üîÑ Criando solicita√ß√£o de conex√£o integrada...');

      // Verificar se usu√°rio j√° tem inst√¢ncia ou solicita√ß√£o pendente
      const { data: existingInstances, error: checkError } = await supabase
        .from('whatsapp_instances')
        .select('id, request_status, status')
        .eq('requested_by', profile.id)
        .or('request_status.eq.requested,status.in.(connected,qr_code,connecting)');

      if (checkError) throw checkError;

      if (existingInstances && existingInstances.length > 0) {
        const pending = existingInstances.find(i => i.request_status === 'requested');
        const active = existingInstances.find(i => ['connected', 'qr_code', 'connecting'].includes(i.status));
        
        if (pending) {
          throw new Error('Voc√™ j√° possui uma solicita√ß√£o pendente');
        }
        if (active) {
          throw new Error('Voc√™ j√° possui uma inst√¢ncia ativa');
        }
      }

      // Criar inst√¢ncia com status 'requested' - isso vai disparar o trigger automaticamente
      const { data: newInstance, error: createError } = await supabase
        .from('whatsapp_instances')
        .insert({
          user_id: profile.id,  // Ser√° a inst√¢ncia final do usu√°rio
          company_id: profile.company_id,
          instance_name: instanceData.instance_name,
          phone_number: instanceData.phone_number,
          request_status: 'requested',  // Status de solicita√ß√£o
          status: 'disconnected',       // Status t√©cnico inicial
          requested_by: profile.id,
          requested_at: new Date().toISOString(),
          request_message: instanceData.message || `Solicita√ß√£o de ${profile.full_name}`,
          webhook_url: `https://webhooklabz.n8nlabz.com.br/webhook/${instanceData.instance_name}`,
          is_active: true
        })
        .select(`
          *,
          user_profile:user_profiles!whatsapp_instances_user_id_fkey(full_name, email, role),
          requester_profile:user_profiles!whatsapp_instances_requested_by_fkey(full_name, email, role)
        `)
        .single();

      if (createError) throw createError;

      console.log('‚úÖ Solicita√ß√£o criada:', newInstance);
      console.log('üì¨ Trigger autom√°tico ir√° notificar gestores');

      // Atualizar lista local
      setInstances(prev => [newInstance, ...prev]);

      return newInstance;
    } catch (error: any) {
      console.error('‚ùå Erro ao criar solicita√ß√£o integrada:', error);
      throw error;
    }
  };

  // Aprovar solicita√ß√£o (para gestores)
  const approveConnectionRequest = async (instanceId: string) => {
    try {
      if (!isManager) throw new Error('Apenas gestores podem aprovar solicita√ß√µes');

      const { data: instance, error } = await supabase
        .from('whatsapp_instances')
        .update({
          request_status: 'approved',
          status: 'qr_code',  // Pronto para gerar QR
        })
        .eq('id', instanceId)
        .select(`
          *,
          user_profile:user_profiles!whatsapp_instances_user_id_fkey(full_name, email, role),
          requester_profile:user_profiles!whatsapp_instances_requested_by_fkey(full_name, email, role)
        `)
        .single();

      if (error) throw error;

      // Criar notifica√ß√£o para o solicitante
      const { error: notifyError } = await supabase
        .from('notifications')
        .insert({
          user_id: instance.requested_by,
          company_id: instance.company_id,
          type: 'connection_approved',
          title: 'Solicita√ß√£o Aprovada! üéâ',
          message: `Sua solicita√ß√£o de conex√£o "${instance.instance_name}" foi aprovada! Voc√™ pode gerar o QR code agora.`,
          data: {
            instance_id: instanceId,
            instance_name: instance.instance_name,
            approved_by: profile?.id,
            approved_by_name: profile?.full_name
          }
        });

      if (notifyError) {
        console.error('Erro ao notificar aprova√ß√£o:', notifyError);
      }

      // Atualizar lista local
      setInstances(prev => 
        prev.map(inst => inst.id === instanceId ? instance : inst)
      );

      return instance;
    } catch (error: any) {
      console.error('Erro ao aprovar solicita√ß√£o:', error);
      throw error;
    }
  };

  // Obter solicita√ß√µes pendentes (para gestores)
  const getPendingRequests = () => {
    return instances.filter(inst => inst.request_status === 'requested');
  };

  // Manter fun√ß√£o original para compatibilidade (deprecated)
  const loadAllUsers = async () => {
    console.warn('üö® loadAllUsers est√° deprecated, use loadAvailableUsersForAssignment');
    return loadAvailableUsersForAssignment();
  };

  // Obter estat√≠sticas das inst√¢ncias
  const getInstanceStats = () => {
    return {
      total_instances: instances.length,
      connected_instances: instances.filter(i => i.status === 'connected').length,
      total_chats: instances.reduce((sum, i) => sum + (i.chat_count || 0), 0),
      total_messages: instances.reduce((sum, i) => sum + (i.message_count || 0), 0),
      unread_messages: 0 // Ser√° calculado quando tivermos dados dos chats
    };
  };

  // Configurar inst√¢ncia
  const configureInstance = async (instanceName: string, config: any) => {
    try {
      console.log('‚öôÔ∏è Chamando endpoint: POST /webhook/config-instancia para', instanceName);
      
      const response = await fetch('https://webhooklabz.n8nlabz.com.br/webhook/config-instancia', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        mode: 'cors',
        body: JSON.stringify({
          instanceName,
          ...config
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.warn('Erro ao configurar inst√¢ncia:', response.status, errorText);
        throw new Error(`Erro ao configurar inst√¢ncia (${response.status})`);
      }

      const data = await response.json();
      console.log(`‚öôÔ∏è Inst√¢ncia ${instanceName} configurada:`, data);
      
      return data;

    } catch (error: any) {
      console.error('Erro ao configurar inst√¢ncia:', error);
      throw error;
    }
  };

  // Editar configura√ß√£o da inst√¢ncia
  const editInstanceConfig = async (instanceName: string, newConfig: any) => {
    try {
      console.log('‚úèÔ∏è Chamando endpoint: POST /webhook/edit-config-instancia para', instanceName);
      
      const response = await fetch('https://webhooklabz.n8nlabz.com.br/webhook/edit-config-instancia', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        mode: 'cors',
        body: JSON.stringify({
          instanceName,
          ...newConfig
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.warn('Erro ao editar configura√ß√£o da inst√¢ncia:', response.status, errorText);
        throw new Error(`Erro ao editar configura√ß√£o (${response.status})`);
      }

      const data = await response.json();
      console.log(`‚úèÔ∏è Configura√ß√£o da inst√¢ncia ${instanceName} editada:`, data);
      
      return data;

    } catch (error: any) {
      console.error('Erro ao editar configura√ß√£o da inst√¢ncia:', error);
      throw error;
    }
  };



  useEffect(() => {
    if (profile) {
      loadInstances();
    }
  }, [profile, isManager]);

  return {
    instances,
    chats,
    loading,
    error,
    createInstance,
    updateInstanceStatus,
    deleteInstance,
    generateQrCode,
    configureInstance,
    editInstanceConfig,
    loadChats,
    createChat,
    loadMessages,
    sendMessage,
    markAsRead,
    getInstancesByUser,
    getInstanceStats,
    loadAllUsers,
    loadAvailableUsersForAssignment,  // Nova fun√ß√£o centralizada
    requestConnection,                // Nova fun√ß√£o integrada de solicita√ß√£o
    approveConnectionRequest,         // Aprova√ß√£o de solicita√ß√£o
    getPendingRequests,              // Obter solicita√ß√µes pendentes
    refreshInstances: loadInstances,
    canCreateInstances: isManager, // Helper para saber se pode criar inst√¢ncias
    connectInstance,
    disconnectInstance
  };
} 